---
title: "Práctica 2.2 Organización de trabajo y operacionalización de variables"
subtitle: "Metodología I - Magíster en Ciencias Sociales"
linktitle: "Práctica 2.2: Operacionalización V2"
date: "2023-04-04"
lang: es
---

# Presentación

## Objetivo de la práctica

El desarrollo de esta guía tiene por objetivo revisar algunos procedimientos básicos de la preparación de datos con R, que son necesarios para luego poder analizar e interpretar los datos.

Por temas de orden y reproducibilidad, en este curso vamos a separar en **dos momentos** el trabajo con datos, y dos archivos de código correspondientes:

  - **Preparación** corresponde a lo que se conoce generalmente como "limpieza", es decir, realizar las modificaciones necesarias para poder efectuar los análisis. Estas modificaciones previas al análisis son necesarias ya que los datos originales con los que se va a trabajar en general no vienen perfectamente adaptados a los análisis que se quieren hacer. Por lo tanto, en cuanto a datos también hacemos la distinción entre datos originales y datos preparados (o procesados).

  - **Análisis**: se relaciona tanto con análisis descriptivos asociados a las preguntas de investigación y como también modelamiento de datos para contrastar hipótesis de investigación.

#### Los procesos de preparación y análisis vinculados a datos y resultados se presentan en el siguiente esquema:{#flujo}

![](images/produccion.png)

Tanto la preparación como el análisis (que son parte del concepto más general de procesamiento) quedan registrados cada uno en un _archivo de código_.

<span class="sidenote">**Archivo de código R**: archivo con extensión .R donde se almacena el código de análisis. Para generarlo desde RStudio: _File > New File > R Script_ (o ctrl+shift+N), y para grabarlo  _File > Save (o ctrl+s)_, y darle nombre la primera vez (recordar: sin tilde ni ñ, y evitar espacios) </span>

## Proyectos, rutas, estructura de carpetas y otros

- **Rproject**: Archivo con extensión .Rproj que permite agrupar todo tu trabajo en una carpeta que contiene todos los archivos vinculados al mismo, facilitando el manejo a través de carpetas.

- **Encontrando la ruta a carpeta local**: lo más fácil es crear la carpeta donde se desean guardar los datos desde el administrador de archivos del computador. Luego, posicionarse con el cursor sobre la carpeta y seleccionar "Propiedades", en la ventana emergente debería aparecer la ruta hacia la carpeta en "Ubicación". Copiar esa ruta y agregar al final el nombre de la carpeta (separada por slash)

- **Sobre los "slashes" (`\` o `/`)**: en la ruta las carpetas y el archivo final aparecen separados por slashes, que según el sistema utilizado pueden ser _slash_ (`/`) o _backslash_ (`\`). En R por defecto se usa _slash_, pero en Windows _backslash_, por lo que si se usa Windows hay que reemplazarlos por _backslash_ o también puede ser por un doble _slash_ (`//`).

- Por temas de compatibilidad general, en las rutas se recomienda evitar tildes, eñes, espacios, mayúsculas y guiones bajos (_).

- **Estructura de carpetas**: para mantener el orden se sugiere seguir un protocolo de estructura de carpetas de proyecto, para lo que recomendamos el protocolo [IPO](https://lisa-coes.com/ipo-protocol/), y que se adapta al flujo de trabajo presentado en la sección anterior. Básicamente son tres carpetas: **input**, **procesamiento**, **output**. En la carpeta input crear la subcarpeta data-orig para guardar datos originales, y data-proc para los procesados. En procesamiento se guardan los archivos de código y en output las tablas y los gráficos.

## Operacionalización de variables

El documento de **código de preparación** posee 5 partes, más una sección de identificación inicial:

0. Identificación y descripción general: Título, autor(es), fecha, información breve sobre el contenido del documento
1. Librerías: cargar librerías a utilizar
2. Datos: carga de datos
3. Selección de variables a utilizar
4. Procesamiento de variables: en este punto, por cada variable se realiza lo siguiente:
    a. Descriptivo básico
    b. Recodificación: datos perdidos y valores (en caso de ser necesario)
    c. Etiquetamiento: de variable y valores (en caso de ser necesario)
    e. Otros ajustes

5. Generación de base de datos preparada para el análisis.

Al final de esta práctica la idea es que cada un_ elabore y entienda su propio documento de preparación de datos.

En el ejemplo vamos a procesar variables de formación ciudadana y variables de caracterización sociodemográfica utilizando los datos de la encuesta International Civic and Citizenship Education Study [ICCS 2016](https://www.iea.nl/studies/iea/iccs/2016) .

## Antecedentes de los datos a utilizar

ICCS 2016 fue el cuarto proyecto realizado por la IEA en educación cívica, donde monitoreó las tendencias en el conocimiento y compromiso cívico durante siete años en los países que participaron en ICCS 2009.

ICCS evalúa a estudiantes de octavo grado, siempre que la edad promedio en este nivel de año sea de 13.5 años o más. En países donde la edad promedio de los estudiantes en el grado 8 era inferior a 13.5, el grado 9 se definió como la población objetivo.


El presente ejercicio tiene por objetivo procesar los datos para obtener las variables relevantes para el estudio de la **Participación cívica**, entendida como el grado en que los estudiantes participan en distintas instancias de toma de decisiones políticas, como la intención de voto, discusión de temas políticos y sociales o el centro de estudiantes, etc. Para ello, junto con variables de participación, consideraremos también el sexo de los estudiantes.

# Preparación de datos ICCS 2016

## 1. Librerías principales (de R) a utilizar en el análisis{#librerias}

Como sabemos, la lógica de R es instalar librerías (solo 1 vez, con `install.packages("librería")`), y luego cargarlas cada vez que es necesario usarlas (con `library(librería)`). El problema de esto es que a veces no se sabe claramente qué librerías están instaladas y cuales no, lo que va a arrojar error al cargarlas. Y, como sucede en R, existe una librería para solucionar este problema que se llama `pacman` (package manager). Lo que hace `pacman` es cargar la librería, y si no está instalada, la instala y la carga:


Para utilizar la primera vez (si es que no está instalada):

```{r eval=FALSE}
install.packages("pacman")
```

Y en adelante, las librerías se cargan así <span class="sidenote"> pacman::p_load(libreria1,libreria2,libreriaX) </span>:


```{r}
pacman::p_load(dplyr, sjmisc, car, sjlabelled, stargazer, haven)
```


Para esta sesión vamos a utilizar Las librerías que vamos a utilizar son:

- `dplyr`: ajuste general de datos
- `sjmisc`: descripción y exploración de base de datos
- `car`: principalmente la función `recode` para recodificar/agrupar valores de variable
- `stargazer`: para tabla descriptiva
- `haven`: Cargar y exportar bases de datos


## 2. Cargar base de datos

**Ajustar espacio de trabajo**

Previo a la carga de nuestra base de datos, se recomienda ejecutar los siguientes comandos:

```{r}
rm(list=ls())       # borrar todos los objetos en el espacio de trabajo
options(scipen=999) # valores sin notación científica
```

La función `rm(list=ls())` permite comenzar con un espacio de trabajo (environment) vacío y sin otros objetos. Así también, la función `options(scipen=999)` desactiva la notación científica, es decir, veremos los valores numéricos con todos sus decimales.

**Datos**

Las bases de datos se pueden cargar de un archivo local o en línea. Para este caso utilizaremos un archivo local en formato .sav:
<span class="sidenote">**Abrir bases de datos en otros formatos**: Los formatos mas comunes en que se almacenan las bases de datos son .dta (Stata),  .sav (Spss) y RData (R). Para abrir desde R utlilizamos la librería `haven` y sus funciones read_dta y read_sav según corresponda. Ej: `datos <- read_dta("base_casen.dta")`. Recordar antes instalar/cargar la librería: `pacman::p_load(haven)`   </span>


```{r eval=FALSE, }
iccs <- read_sav("input/data/original/ISGCHLC3.sav", encoding = "UTF-8")
```

```{r echo=FALSE}
iccs <- read_sav("../files/data/external_data/ISGCHLC3.sav", encoding = "UTF-8")
```


La base de datos aparece como un objeto en nuestro espacio de trabajo, con el nombre original con la que fue guardada (iccs):



Realizamos un chequeo básico de la lectura de datos: nombres de las variables y tamaño de la base en términos de casos y variables (en este ejemplo, `r dim(iccs)[1]` casos y `r dim(iccs)[2]` variables).

```{r}
dim(iccs) # dimension de la base
```
Y si se quiere revisar en formato de planilla de datos:

```{r}
View(iccs)
```

## 3. Selección de variables a utilizar

Este paso consiste en crear un subset reducido de datos que contenga solo las variables de interés. Para ello:

1. Se identifica el nombre de las variables que registran la información de preguntas o items del instrumento: esto aparece en el libro de códigos y/o en el cuestionario, o también se puede hacer buscando en la base de datos mediante alguna palabra clave asociada a la pregunta. Por ejemplo, si queremos buscar variables asociadas a educación, utilizamos la función `find_var` (de `sjmisc`, librería que cargamos en el paso 1), que nos entrega nombre de la variable en columna var.name. Por ejemplo, si buscamos alguna variable asociada al concepto _votar_:

```{r}
find_var(data = iccs,"Vote")
```

Nos informa que hay una serie de variables relacionadas con votar.


Mediante la función `select` de `dplyr`, seleccionamos cada una de nuestras variables de interés y creamos una nueva base con el nombre `proc_data`, donde "proc" hace referencia a base procesada:

```{r}
proc_data <- iccs %>% select(IS3G31B, # Intención de Voto en elecciones nacionales
                          IS3G31E, # Intención de unirse a un partido político
                          IS3G31G, # Intencion candidato en elecciones locales
                          S_GENDER) # genero 

# Comprobar
names(proc_data)
```

Mediante el comando `get_label` obtenemos el atributo label de las variables.

```{r}
sjlabelled::get_label(proc_data)
```

Podemos ver que son largas o con códigos poco informativos, por lo tanto, es necesario cambiarlas por etiquetas más cortas y de fácil identificación.

## 4. Procesamiento de variables

Para el procesamiento de cada variable se seguirá el siguiente flujo de trabajo:

a. Descriptivo general
b. Recodificación: de casos perdidos y otros valores (en caso necesario)
c. Etiquetado: cambio de nombres de variables y valores (en caso necesario)
d. Otros ajustes

Y se recomienda también un descriptivo final para revisar que el procesamiento de cada variable está ok.

### 4.1 Intención de participación

En Latinobarómetro, lass variables que permiten medir la Confianza en instituciones políticas en Chile son las siguientes:

* [`IS3G31B`]: "Participating in Society/When an adult, what do you think you will do/Vote in <national elections>"
* [`IS3G31E`]: "Participating in Society/When an adult, what do you think you will do/Join a political party"
* [`IS3G31G`]: "Participating in Society/When an adult, what do you think you will do/Stand as a candidate in <local elections>"

_a. Descriptivo_

Para los descriptivos se utilizará la función `frq`, de la librería `sjmisc`:

```{r}
frq(proc_data$IS3G31B)
```

En esta variable vemos valores asociados a la opción "invalid" (7), "Not administered" (8) y "ommited" (9), que corresponde definirlos como casos perdidos (en el caso de R, como casos NA), pero vienen recodificados como NA en la base (hay 137 NA). El resto de los valores y etiquetas se encuentran en un orden contraintuitivo (mayor valor indica menos intención de voto), así que en la recodificiación nos haremos cargo de reordenar las categorías.

_b. Recodificación_

Para reordenar las categorías volvemos a utilizar la función `recode`, de la librería `car`

```{r}
proc_data$IS3G31B <- recode(proc_data$IS3G31B, "1=4; 2=3; 3=2; 4=1")
proc_data$IS3G31E <- recode(proc_data$IS3G31E, "1=4; 2=3; 3=2; 4=1")
proc_data$IS3G31G <- recode(proc_data$IS3G31G, "1=4; 2=3; 3=2; 4=1")
```

_c - Etiquetado_

Vamos a dar un nombre más sustantivo a las variables con la función `rename`, de la librería `dplyr`:

```{r}
proc_data <- proc_data %>% rename("voto"=IS3G31B, # Intencion de voto
                                  "candidato"=IS3G31E, # Intencion de ser candidato
                                  "partido"=IS3G31G) # Intencion de unirse a partido politico
```

Además de cambiar el nombre, queremos cambiar las etiquetas de las variables.

```{r}
get_label(proc_data$voto)
proc_data$voto <- set_label(x = proc_data$voto,label = "Intencion de voto")

get_label(proc_data$candidato)
proc_data$candidato  <- set_label(x = proc_data$candidato, label = "Intencion de ser candidato")

get_label(proc_data$partido)
proc_data$partido  <- set_label(x = proc_data$partido, label = "Intencion de unirse a partido politico")
```

_d. Otros ajustes_

Para este caso vamos a crear una variable que sea el promedio de los tres items de intención de participación

```{r}
proc_data <- proc_data %>% rowwise() %>% mutate(int_part = mean(c(voto, candidato, partido), na.rm = T))
summary(proc_data$int_part)
```

```{r}
get_label(proc_data$int_part)
```

Vemos que no tiene etiqueta.

```{r}
proc_data$int_part  <- set_label(x = proc_data$int_part, label = "Intención de participación")
```


_Revisión final_

Nuevamente un descriptivo de cada variable para confirmar que el procesamiento está ok:

```{r}
frq(proc_data$voto)
frq(proc_data$candidato)
frq(proc_data$partido)
```

Vemos que los valores (labels) de cada categoría de las primeras variables que recodificamos no se corresponden con el nuevo valor. Para re-etiquetar valores usamos la función `set_labels`, de la librería `sjlabelled`. Aprovechamos también de pasarlas a español

```{r}
proc_data$voto <- set_labels(proc_data$voto,
            labels=c( "Ciertamente no lo haria"=1,
                      "Probablemente no lo haria"=2,
                      "Probablemente lo haria"=3,
                      "Ciertamente lo haria"=4))

proc_data$candidato <- set_labels(proc_data$candidato,
            labels=c( "Ciertamente no lo haria"=1,
                      "Probablemente no lo haria"=2,
                      "Probablemente lo haria"=3,
                      "Ciertamente lo haria"=4))

proc_data$partido <- set_labels(proc_data$partido,
            labels=c( "Ciertamente no lo haria"=1,
                      "Probablemente no lo haria"=2,
                      "Probablemente lo haria"=3,
                      "Ciertamente lo haria"=4))
```

y volvemos a revisar

```{r}
frq(proc_data$voto)
frq(proc_data$partido)
```

#### 4.2. Sexo

* [`S_GENDER`]	=	Sexo

_a. Descriptivo_

```{r}
frq(proc_data$S_GENDER)
```

_b. Recodificación_

Esta variable generalmente no tiene problemas de etiquetado, viene también con niños=0 y niñas=1

_c. Etiquetado_

Cambio de nombre de la variable

```{r}
proc_data <- proc_data %>% rename("sexo"=S_GENDER)
```

Podemos pasar las categorías a español:

```{r}
proc_data$sexo <- set_labels(proc_data$sexo,
            labels=c( "Ninios"=0,
                      "Ninias"=1))
```


También queremos cambiar la etiqueta de la variable.

```{r}
get_label(proc_data$sexo)
proc_data$sexo <- set_label(x = proc_data$sexo,label = "Sexo")
```

Revisar con un nuevo descriptivo:

```{r}
frq(proc_data$sexo)
```

## 5. Generación de base de datos procesada para el análisis

Antes de guardar la base procesada, revisamos nuevamente todas las variables con una tabla descriptiva general mediante la función `stargazer` (de la librería homónima)

Primero vamos a reformatear el objeto proc_data como base de datos (as.data.frame), paso necesario para que sea reconocido como tal por `stargazer`


```{r}
proc_data <-as.data.frame(proc_data)
stargazer(proc_data, type="text")
```
<div class="alert alert-info">
Si se desea modificar las columnas que aparecen en la tabla se puede ocupar la opción `summary.stat`, donde se pueden especificar:

- "max" maximum
- "mean" mean
- "median" median
- "min" minimum
- "n" number of observations
- "p25" 25th percentile
- "p75" 75th percentile
- "sd" standard deviation

Por ejemplo, si quiero una tabla solo con promedio, n, sd y p75: `stargazer(data, type="text", summary.stat = c("mean", "n", "sd", "p75"))`

</div>

- Guardar base de datos procesada: en carpeta local <span class="sidenote">La ruta hacia su carpeta local si está trabajando en windows debería ser algo como "C:/Users/Lenovo/Clases/y aquí nombre del archivo a grabar</span>

El comando para guardar es `save`. En este caso, seguimos una estructura de carpetas de datos, separando en una carpeta los datos originales, y en otra (proc) los datos procesados:

```{r eval=FALSE}
save(proc_data,file = "input/data/proc/iccs_proc.RData")
```

```{r echo=FALSE}
save(proc_data,file = "../files/data/iccs_proc.RData")
```


## Descriptivos básicos de las variables

Podemos conocer ciertas medidas de tendencia central utilizando algunas funciones de `dplyr`

### Media por grupos

```{r}
proc_data %>% dplyr::group_by(sexo) %>% summarise(mean(int_part, na.rm=TRUE))
```

### Representación

```{r warning=FALSE}
library(ggplot2)
proc_data %>% na.omit() %>% 
  ggplot(aes(x=as_factor(voto))) +
  geom_bar()+
  theme_bw()
```

